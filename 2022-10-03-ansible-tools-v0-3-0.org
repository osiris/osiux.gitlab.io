#+TITLE:       /Ansible Tools/ =v0.3.0=
#+AUTHOR:      Osiris Alejandro Gomez
#+EMAIL:       osiux@osiux.com
#+LANGUAGE:    es
#+LINK_HOME:   index.html
#+INCLUDE:     header.org
#+DATE:        2022-10-03 15:06

[[file:img/2022-10-03-ansible-tools-v0-3-0.jpg][file:tmb/ansible-tools-v0-3-0.jpg]]

** /aniversario!/ üéÇ

Hoy **2022-10-03** se cumplen exactamente 3 a√±os desde el primer
/commit/ del /repo/ =ansible_tools= [fn:ansible_tools], y me ocup√© de
versionar una serie de /scripts/ que ten√≠a dando vueltas para aprovechar
la ocasi√≥n :)

** /todo comenz√≥ alg√∫n tiempo atr√°s.../

Viendo el historial record√© c√≥mo fue que todo comenz√≥, b√°sicamente
estaba lidiando con la molesta tarea de actualizar la =version= de cada
/rol/ en el archivo =requirements.yml= de un gran /playbook/ de
=ansible= [fn:ansible], y como eran demasiados =roles= cada uno en en un
repositorio diferente, era muy engorroso estar viendo cu√°l era el √∫ltimo
/release/ y realizar el cambio.

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/commit/bd38875][=v0.1.0 requirements-version-update=]]

Si definimos como tarea /"actualizar la versi√≥n de cada rol al √∫ltimo
tag disponible"/ es algo que se puede automatizar f√°cilmente. Bast√≥ con
dividir la tarea en 2 para r√°pidamente obtener un resultado exitoso.

Primero gener√© =git-ls-remote-tags= que no hace otra cosa que listar los
=tags= del repositorio actual de forma cronol√≥gica de modo que al
quedarse con el primer resultado, obtenemos el √∫ltimo /tag/.

Luego fue simplemente leer el /YAML/ e ir reescribi√©ndolo con lo mismo
pero reemplazando =version= con el √∫ltimo /tag/.

Y este /script/ no solo permiti√≥ ahorrar tiempo, lo mejor fue ahorrar
dolores de cabeza, luego con una revisi√≥n manual bastaba para ajustar
alguna dependencia en particular (no siempre se desea la √∫ltima
versi√≥n).

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/compare/v0.1.1...v0.1.6][=v0.1.1 - v0.1.6= /parches y mejoras/]]

Hubo peque√±as mejoras y parches, aunque apareci√≥ otra necesidad, la de
reescribir el origen de cada repositorio, b√°sicamente convertir un
/repo/ =ssh= a una /url/ =https=, y esto fue necesario para clonar
repositorios en una red sin acceso por /SSH/.

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/compare/v0.1.6...v0.1.7][=v0.1.7= /envolviendo =awx-cli=/]]

Si bien el =cli= de /AWX/ [fn:awx] es muy completo, me vi con la
necesidad de extender ciertas funcionalidades, mayormente agregar
validaciones y automatizar algunas tareas repetitivas de =ad-hoc=,
asignaciones de permisos, obtener valores de variables de /hosts/ e
/inventories/ y comenzar a recibir y enviar un /job_template/ de un
entorno a otro.

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/compare/v0.1.7...v0.1.8][=v0.1.8= /encerar y pulir/]]

Variedad de /scripts/ pero mayormente hay cierta cosm√©tica general, se
comienzan a unificar criterios y muchas mejoras gracias a las
sugerencias de =shellcheck= [fn:shellcheck].

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/compare/v0.1.8...v0.2.0][=v0.2.0= /happy gnu year/]]

Aprovecho el a√±o nuevo para comenzar versionando para la posteridad una
serie de mejoras y nuevas funcionalidades para que no se pierdan al irme
de vacaciones =XD=

** [[https://gitlab.com/gcoop-libre/ansible_tools/-/compare/v0.2.0...v0.3.0][=v0.3.0= /automated deploy/]]

La mayor novedad es la posibilidad de generar un /deploy/ desatendido
del repositorio =awx= donde est√°n todos los recursos en forma de
=.json=, basta con ejecutar =awx-deploy-revision= (con m√≠nimas opciones)
y este /script/ se ocupa de todo :)

Relacionado al /deploy=/ ahora se puede generar un sumario de los
=releases= en base a los /tags/ y tambi√©n se agregan varias utilidades
para obtener y actualizar variables de archivos /YAML/ y algunas para
realizar comparaciones de variables entre diferentes /groups/ de un
mismo /inventory/, esto result√≥ muy √∫til para unificar valores y mejorar
la precedencia.

Otros comandos √∫tiles permiten lidiar con las diferentes formas de
escribir una variable =vault=

Creaci√≥n y modificaci√≥n de credenciales =ssh= cifradas desde un
repositorio =pass= o desde archivos en el directorio =~/.ssh/=.

** /mejora continua/

Hace 3 a√±os no hubiese imaginado que las =ansible tools= se iban a
convertir en mas de 270 /scripts/ de uso diario y que hoy las considero
indispensables para interacturar con /GitLab/ y /AWX/.

Seguramente, ir√°n mejorando y en alg√∫n momento habr√° que dar el salto a
nuevas versiones de /AWX/ y nuevas integraciones.

[fn:ansible_tools]  https://gitlab.com/gcoop-libre/ansible_tools
[fn:ansible]        https://www.ansible.com/
[fn:awx]            https://github.com/ansible/awx/
[fn:shellcheck]     https://github.com/koalaman/shellcheck
